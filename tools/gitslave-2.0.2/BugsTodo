* Inappropriate output substitution

I had a superproject name foo with folders.  Inside the folders were
files which started with the project name (bar/foo.h baz/foo-biff.spec
etc) When performing a `gits pull` the resulting changes had %REPO%
substitutions performed on them so that I actually saw (bar/%REPO%.h
and baz/%REPO%-biff.spec) incorrect filenames which screwed with the
ASCII formatting.


* Windows

Gits purportedly works with strawberry-perl and msysgit's perl on
windows.  The installation Makefile doesn't work usefully and test
scripts probably also do not work.  However, gits itself does, for
public URLs.  Private URLs which use '\' for path separators do not
support relative URLs.

Getting the system fully (or at least generally) supporting windows
would be very nice.


* Create gits autoattach

For people who have manually assembled a superproject with subprojects
already in place, create a convenient command which goes through and
attempts to set up the configuration for each of the (new) existing
subprojects.  Use origin's URL for the gitslave URL and try to deduce
a relative relationship between the URLs.


* gits chown to fix ownership

This could also be something added to git itself, I suppose, but
it may be easier to do in gitslave.  When doing a make install as
root, ownership of version-tracked files may be set to root, and
this can cause problems for git commands (reset, etc.).  It would be
nice to have all version-tracked (or not explicitly ignored) files
(and all not-ignored directories) change ownership to the real user,
as determined by real uid (if != effective uid) or $USER/$LOGNAME,
if not explicitly specified on command line.

Further complicating this is that after performing a manual chown,
the ctime on many or all files is updated, which can cause some git
operations (notably reset --hard or checkout) to force the checkout
of many or all of the files in a repository.  Some way of "touching"
the git status cache for these files to prevent that would be nice.
(It is possible that the problem is actually due to ctime update on
.git/ repository files after a chmod -R, so that a limited update in
`gits chown` might eliminate this problem without an explicit fix.)


* gits release should be able to release non-existent directory

`gits release foo bar` if foo does not exist should not be an error
and should continue to release bar (or if bar also does not exist,
exit with success).  Warning, perhaps if you like that sort of thing,
but not an error.


* gits release should be able to release untracked slaves

gits release currently can only release resources which are defined
gitslave repositories on the local branch.  However, it would be
convenient if you could ask for a sub-git repository which was NOT
tracked by gitslave to be released.  The usage case is a repository
which exists on one but not all branches.  If you get it when you
switch to a particular branch, it is not removed when you switch to a
different branch, it left around marked as "Untracked".  It would be
nice to be able to release such a stale repository (if appropriately
safe).


* gits detach/release should not use rm -rf

The current use of rm -rf to remove repositories is overkill, and can
lead to bad consequences in some cases; if two repositories are nested
(e.g. sub4 and sub4/sub1) and you release or detach sub4, only the
sub4 repository will be checked, but sub4/sub1 will be removed by rm -rf.
If git itself had some way to handle this, that would be ideal, but
git clean doesn't really cut it.  Something with find and checking for
.git directories would be better.  If a better solution were found,
that properly handles nested repositories, it would also be possible
to eliminate the "all or nothing" semantics for release, allowing
partial release to be performed safely.


* gits status --porcelain|--short breaks the gits porcelain

gits status depends on decoration not present if --porcelain or
--short are given.  (git status --short --branch presents the branch
information, but differently).  It should be protected in some way.


* gits attach could allow existant destination under one condition

Currently attach fails if the destination location exists.  This is a
good double-check, but there is one case where this could be
permissible.  If the destination location is a git repo and the git
repo's remote origin URL is consistent with the (possibly relative)
URL provided on the attach line.


* Automatically disable pager for interactive git commands

Gits uses the configured (or default if unconfigured) pager from the
master repository (default is `less -FRSX`) to page gits output.  For
most gits commands, this makes sense, but some commands like `gits
commit` may want to perform interactive operations using $EDITOR or
built-in functionality (e.g. commit --interactive).  It is possible to
disable the pager with -n or --no-pager, or setting GIT_PAGER=cat, but
if it were possible for gits to detect interactive commands reliably
and do this automatically, that would be better.

Some interactive functionality (notably SSH password/key-phrase input)
uses /dev/tty directly and seems to work even with pagination.


* Superproject branches having different slaves is hard

The behavior when different branches have different slave modules
associated with them and you checkout back and forth is probably not
ideal (nor are any of the options we have thought of completely
ideal).


* Shallow clone/sparse checkout support for subprojects

Some people want to have shallow clones or sparse checkouts.  This
cannot easily be done for submodules, but seems fairly reasonable for
gitslave.  We would just need some magic to use the right arguments
(presumably shallow would be a .git/config thing, and sparse would be
a .gitslave config thing).


* Allow API to move submodules

There is a workaround of removing it and re-adding it, but allowing
direct movement might be useful.


* Add alternative URLs

Allow multiple URLs to be specified for a particular resource and
during populate, select the first one which is reachable.  Ideally,
allow re-running populate to update the currently used URL for origin
if the reachable URL might have changed.

Use case might be for an on-laptop repo which might sometimes be
directly attached and other times might need to go through an ssh
tunnel or otherwise have various tricks.


* Add "gits branch --set-upstream" support

Currently there is no support for changing upstream repositories via
--set-upstream with the correct relative URLs.  See update-remote-url.


* Add -n, --dry-run option to display, but not run, subcommands

This is especially useful when trying to understand how this all works.
Implementing this could be tricky when the output from a git command is
used to determine what other commands will be run.  We might need an extra
argument to getcmd() that says 'this command won't change anything, and I
need the output' and use this to selectively run certain safe commands even
in -n mode.


* Gits clean -fdx should provide more warning about deleting unlisted slaves

While gits clean checks for slave directories (that would otherwise
get removed by git clean -fdx) it should double check for .git
directories inside any other subdirectories that are not listed as
slaves.  Especially in a case where GITSLAVE environment variable is
used to select different sub- and super-sets of slaves or you check
out alternate .gitslave files with a different set of slaves, there
may be slaves present that aren't in the currently active set, and you
probably (although not always) don't want to remove them.  Another -f
argument (or maybe -F?) should be necessary to force their removal.


* Auto-colorized output

Gits uses the configured (or default if unconfigured) pager from the
master repository (default is `less -FRSX`) to page gits output.
However, auto-colorization of git subcommands depends on detecting
standard output as a terminal (rather than a pipe to gits) and is
therefore disabled.  Adding --color to subcommands based on the output
of `git config --get-colorbool color.XXX` could fix this problem, but
not all commands support this option, and the presence of ANSI color
markup might confuse gits summarization or other parsing (explicit
--no-color has already been added to all `git branch` commands to
handle that case already).

As a workaround, setting `gits config color.ui always` enables
colorized output from gits (but also from git in other contexts where
it may not be desirable, e.g. `git $command | grep $pattern`).
However, gits can handle this setting, and as noted above, disables
color where it would cause confusion (in branch name parsing)


* Enhance docmd/getcmd to take an optional third argument for directory

Most of the uses of docmd() and getcmd() in gits have commands in the
form of `cd "$slavedir" && $git do-something` - the use of the
separate cd command and && requires /bin/sh to be exec'ed to interpret
the command, and creates more possibilities for quote/escape mangling
of directory paths (whitespace is handled by the quotes, but any of
[$`"] will still cause problems).  Having an optional argument that is
used as a chdir target for the command could eliminate that (although
it would require replacing "system" with explicit fork/chdir/exec).


* Relative paths aren't handled intelligently by gits add

Right now, `gits add submod/some/thing.c` will just abort, telling you that
you are trying to do something very tricky that needs to be handled
manually.  Of course, it is tricky enough that the user will probably botch
it too, especially if there are multiple submodules (think rh-dist/anaconda
and jtt).  There should be an intelligent gits add that does something
other than fail - it has all the necessary information to figure out the
appropriate slave modules from the pathname.


* Pull --rebase does not use --preserve-merges

The pulls command now uses fetch + rebase -p to speed up processing
(it avoids setting up ssh for all branch*repository cominations) and
to preserve merges; however, the pull command does not.  This
inconsistency might be worth fixing, but note that even pulls does not
always do this, notably if a repository or refspec argument is given,
but also if older version of git is present.

On the other hand, adding unnecessary incompatibilities with git isn't
something to be desired.


* Pull is very slow

Because of the need to contact many repositories (setting up an ssh session
for each one), doing a pull can be very slow.

This is mitigated by use of -p|--parallel=COUNT option, which runs
subsidiary pulls in parallel, assuming that you have Parallel::Iterate from
CPAN installed.  It is an imperfect solution, since there are some race
conditions, especially if you re-use ssh sessions by adding the following
to your .ssh/config:

Host git
	ControlMaster auto
	ControlPath ~/.ssh/master-%r@%h:%p

and either manually running (ssh -N git&) or wrapping gits in a shell
script that starts a control master ssh if needed.  (Check an existing
control path for liveness with `ssh -S $PATH -O check localhost`, and use
`ssh -S $PATH -O exit localhost` to cleanly terminate one started up for
gits operation.)


* Pulls is even slower (for some pull options / arguments)

Now that pulls actually breaks up the pulls into pull + merges, or
fetch + rebases, it runs much faster when there are multiple branches,
since it only fetches each repository once.  However, to do this, it
has to "understand" the arguments passed to it.  This is done in a
somewhat simplistic way that handles standalone single character
options (-a -b -c) but not (-abc), and option arguments with =
(--strategy=ours) but not ones without (--strategy ours) or (-s ours).
The end-of-options option (--) is also considered tricky.  In those
cases, or in the (more complicated) case of a repository or refspec
argument, rather than running the faster and safer (--preserve-merges
for rebase) fetch and rebase subcommands, it falls back to just
running git pull for every branch@slave repository combination.

In the case of a command-line specified repository or refspec, it
might be possible to determine the remote from the command-line
argument and the output of `git remote show <remote>`, but this
requires figuring out what the remote of interest is.  It also raises
the question about whether you really want to pull a particular
refspec for all your currently active tracking branches - it is much
more likely that you want it for just one.

As for the option parsing, doing it better would require a full
separate options parser, and doesn't seem to be worth the effort,
since it is always possible to specify any options in a way that
gits will be able to handle without falling back to multiple git pulls.
There are already some option combinations that git pull doesn't
handle (like git pull -fv --rebase) so this isn't just a problem for
gits.


* Inconsistent state on an abort is bad

This can happen most easily on a push if someone else managed to sneak
in a push of their own between your last pull and the current push
attempt.  This is a race condition.

Possible solution: use a lock file in the top/supermodule managed by
gits with an automatic timeout.  Create the lock beforehand, push top,
push everything else, delete lock, push top.

Problems: This file will have MANY commits in it, assumes synchronized
clocks, and can still have the race if clocks are not synchronized,
the push gets stalled/takes longer than expected, etc.


* On an abort, you don't get to see the output of what worked, so
  recovery is made harder.

It can be added, but seemingly it is only going to make things more
cluttered and confused.

Should we stick it in a tmp file somewhere to be cleaned up on the
next gits operation?


* wb/bkmk requires complete rebuild after pulls with multiple branches

In a repository with multiple local tracking branches, `gits pulls` will
perform a `git checkout` for each branch.  One undesirably side-effect of
this is that wb/bkmk will detect a (timestamp?) change to the configure
script or its results, and re-run the entire Baka configure script again.


* Complete log history not available in superproject

We could gather slave history and put it in changelog or something, or
even a special superproject commit, but this would not work if another
superproject made the change.

One bad side-effect of this is that gitk does not have a global
purview of what is happening.

Alternately, we could have it pull all logs since the last checkpoint.

The following gives you unifiedish history since the last tag.

gits exec sh -c 'git log -n 10 --pretty=oneline  --abbrev-commit `git describe --match "*-20[01][0-9]*" --long  | sed "s/-[0-9][0-9]*-[a-z0-9][a-z0-9]*\$//"`..HEAD'


* Interactive commit messages not available

You cannot nicely use gits commit and have the system put up an editor
for you to type your commit message in.  Or rather, you can, but you
will have to retype once per slave with a change.

If we could detect this state, we could put up the editor ourselves,
make a unified template with unified status, and then add the -F flag
to point at the newly created message


* Collapse of redundant messages in output stymied by hash ids

In quite a few commands the presence of different hash ids in each slave
module generates insignificant differences in the output that prevent them
from being coalesced.  There is better support for eliminating these in the
gits pulls command (even there it is probably not complete) but not really
any for other commands, especially pass-throughs.


* Eliminate dependence on .gitslave searching

Rather than searching for .gitslave files in parent directories, save
the master directory with `git config gits.master ../../...` (or use
an absolute path if the slave was added to master using an absolute
path).  Use `git rev-parse --show-cdup` to get the git top-level
directory, then `git config gits.master` to get GITS_DIR.  This will
allow master and slave repositories to be located in non-hierarchical
locations, using relative or absolute paths.

Interaction with recursive projects will need to be considered.  It is
unclear what the least surprise would be, or whether both are equally
desirable.  Note that some people prefer to manually move git repos
around inside of gitslave superprojects (either for a manual attach or
the non-existent rename) to reduce cloning costs.  This might mean
that we need to support traditional .gitslave location discovery if we
cannot find a .gitslave using the cached value (if we do it at all).
However, as long as we are doing any kind of .gitslave discovery (even
if we do NOT do any caching—I'm a little dubious that this will
actually speed things up), we should probably support the
GIT_CEILING_DIRECTORIES and GIT_DISCOVERY_ACROSS_FILESYSTEM.
